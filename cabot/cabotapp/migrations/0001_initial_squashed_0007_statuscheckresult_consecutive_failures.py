# Generated by Django 5.1.2 on 2024-11-03 21:53

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# cabot.cabotapp.migrations.0005_auto_20170818_1202


class Migration(migrations.Migration):
    replaces = [
        ("cabotapp", "0001_initial"),
        ("cabotapp", "0002_auto_20170131_1537"),
        ("cabotapp", "0003_auto_20170201_1045"),
        ("cabotapp", "0004_auto_20170802_1327"),
        ("cabotapp", "0005_auto_20170818_1202"),
        ("cabotapp", "0006_auto_20170821_1000"),
        ("cabotapp", "0007_statuscheckresult_consecutive_failures"),
    ]

    dependencies = [
        ("contenttypes", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AlertPlugin",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.CharField(editable=False, max_length=30, unique=True)),
                ("enabled", models.BooleanField(default=True)),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_cabotapp.alertplugin_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Instance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.TextField()),
                (
                    "alerts_enabled",
                    models.BooleanField(
                        default=True, help_text=b"Alert when this service is not healthy."
                    ),
                ),
                ("last_alert_sent", models.DateTimeField(blank=True, null=True)),
                ("email_alert", models.BooleanField(default=False)),
                ("hipchat_alert", models.BooleanField(default=True)),
                ("sms_alert", models.BooleanField(default=False)),
                (
                    "telephone_alert",
                    models.BooleanField(
                        default=False,
                        help_text=b"Must be enabled, and check importance set to Critical, to receive telephone alerts.",
                    ),
                ),
                ("overall_status", models.TextField(default=b"PASSING")),
                ("old_overall_status", models.TextField(default=b"PASSING")),
                (
                    "hackpad_id",
                    models.TextField(
                        blank=True,
                        help_text=b"Gist, Hackpad or Refheap js embed with recovery instructions e.g. https://you.hackpad.com/some_document.js",
                        null=True,
                        verbose_name=b"Embedded recovery instructions",
                    ),
                ),
                (
                    "runbook_link",
                    models.TextField(
                        blank=True, help_text=b"Link to the service runbook on your wiki."
                    ),
                ),
                (
                    "address",
                    models.TextField(blank=True, help_text=b"Address (IP/Hostname) of service."),
                ),
                (
                    "alerts",
                    models.ManyToManyField(
                        blank=True,
                        help_text=b"Alerts channels through which you wish to be notified",
                        to="cabotapp.alertplugin",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="InstanceStatusSnapshot",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("time", models.DateTimeField(db_index=True)),
                ("num_checks_active", models.IntegerField(default=0)),
                ("num_checks_passing", models.IntegerField(default=0)),
                ("num_checks_failing", models.IntegerField(default=0)),
                ("overall_status", models.TextField(default=b"PASSING")),
                ("did_send_alert", models.IntegerField(default=False)),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="snapshots",
                        to="cabotapp.instance",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.TextField()),
                (
                    "alerts_enabled",
                    models.BooleanField(
                        default=True, help_text=b"Alert when this service is not healthy."
                    ),
                ),
                ("last_alert_sent", models.DateTimeField(blank=True, null=True)),
                ("email_alert", models.BooleanField(default=False)),
                ("hipchat_alert", models.BooleanField(default=True)),
                ("sms_alert", models.BooleanField(default=False)),
                (
                    "telephone_alert",
                    models.BooleanField(
                        default=False,
                        help_text=b"Must be enabled, and check importance set to Critical, to receive telephone alerts.",
                    ),
                ),
                ("overall_status", models.TextField(default=b"PASSING")),
                ("old_overall_status", models.TextField(default=b"PASSING")),
                (
                    "hackpad_id",
                    models.TextField(
                        blank=True,
                        help_text=b"Gist, Hackpad or Refheap js embed with recovery instructions e.g. https://you.hackpad.com/some_document.js",
                        null=True,
                        verbose_name=b"Embedded recovery instructions",
                    ),
                ),
                (
                    "runbook_link",
                    models.TextField(
                        blank=True, help_text=b"Link to the service runbook on your wiki."
                    ),
                ),
                ("url", models.TextField(blank=True, help_text=b"URL of service.")),
                (
                    "alerts",
                    models.ManyToManyField(
                        blank=True,
                        help_text=b"Alerts channels through which you wish to be notified",
                        to="cabotapp.alertplugin",
                    ),
                ),
                (
                    "instances",
                    models.ManyToManyField(
                        blank=True,
                        help_text=b"Instances this service is running on.",
                        to="cabotapp.instance",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ServiceStatusSnapshot",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("time", models.DateTimeField(db_index=True)),
                ("num_checks_active", models.IntegerField(default=0)),
                ("num_checks_passing", models.IntegerField(default=0)),
                ("num_checks_failing", models.IntegerField(default=0)),
                ("overall_status", models.TextField(default=b"PASSING")),
                ("did_send_alert", models.IntegerField(default=False)),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="snapshots",
                        to="cabotapp.service",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Shift",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("start", models.DateTimeField()),
                ("end", models.DateTimeField()),
                ("uid", models.TextField()),
                ("last_modified", models.DateTimeField()),
                ("deleted", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StatusCheck",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.TextField()),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text=b"If not active, check will not be used to calculate service status and will not trigger alerts.",
                    ),
                ),
                (
                    "importance",
                    models.CharField(
                        choices=[
                            (b"WARNING", b"Warning"),
                            (b"ERROR", b"Error"),
                            (b"CRITICAL", b"Critical"),
                        ],
                        default=b"ERROR",
                        help_text=b"Severity level of a failure. Critical alerts are for failures you want to wake you up at 2am, Errors are things you can sleep through but need to fix in the morning, and warnings for less important things.",
                        max_length=30,
                    ),
                ),
                (
                    "frequency",
                    models.IntegerField(default=5, help_text=b"Minutes between each check."),
                ),
                (
                    "debounce",
                    models.IntegerField(
                        default=0,
                        help_text=b"Number of successive failures permitted before check will be marked as failed. Default is 0, i.e. fail on first failure.",
                        null=True,
                    ),
                ),
                (
                    "calculated_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            (b"passing", b"passing"),
                            (b"intermittent", b"intermittent"),
                            (b"failing", b"failing"),
                        ],
                        default=b"passing",
                        max_length=50,
                    ),
                ),
                ("last_run", models.DateTimeField(null=True)),
                ("cached_health", models.TextField(editable=False, null=True)),
                (
                    "metric",
                    models.TextField(
                        help_text=b"fully.qualified.name of the Graphite metric you want to watch. This can be any valid Graphite expression, including wildcards, multiple hosts, etc.",
                        null=True,
                    ),
                ),
                (
                    "check_type",
                    models.CharField(
                        choices=[
                            (b">", b"Greater than"),
                            (b">=", b"Greater than or equal"),
                            (b"<", b"Less than"),
                            (b"<=", b"Less than or equal"),
                            (b"==", b"Equal to"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text=b"If this expression evaluates to true, the check will fail (possibly triggering an alert).",
                        null=True,
                    ),
                ),
                (
                    "expected_num_hosts",
                    models.IntegerField(
                        default=0,
                        help_text=b"The minimum number of data series (hosts) you expect to see.",
                        null=True,
                    ),
                ),
                (
                    "allowed_num_failures",
                    models.IntegerField(
                        default=0,
                        help_text=b"The maximum number of data series (metrics) you expect to fail. For example, you might be OK with 2 out of 3 webservers having OK load (1 failing), but not 1 out of 3 (2 failing).",
                        null=True,
                    ),
                ),
                ("endpoint", models.TextField(help_text=b"HTTP(S) endpoint to poll.", null=True)),
                (
                    "username",
                    models.TextField(blank=True, help_text=b"Basic auth username.", null=True),
                ),
                (
                    "password",
                    models.TextField(blank=True, help_text=b"Basic auth password.", null=True),
                ),
                (
                    "text_match",
                    models.TextField(
                        blank=True, help_text=b"Regex to match against source of page.", null=True
                    ),
                ),
                (
                    "status_code",
                    models.TextField(
                        default=200, help_text=b"Status code expected from endpoint.", null=True
                    ),
                ),
                (
                    "timeout",
                    models.IntegerField(
                        default=30, help_text=b"Time out after this many seconds.", null=True
                    ),
                ),
                (
                    "verify_ssl_certificate",
                    models.BooleanField(
                        default=True,
                        help_text=b"Set to false to allow not try to verify ssl certificates (default True)",
                    ),
                ),
                (
                    "max_queued_build_time",
                    models.IntegerField(
                        blank=True,
                        help_text=b"Alert if build queued for more than this many minutes.",
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_cabotapp.statuscheck_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("mobile_number", models.CharField(blank=True, default=b"", max_length=20)),
                ("hipchat_alias", models.CharField(blank=True, default=b"", max_length=50)),
                ("fallback_alert_user", models.BooleanField(default=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="service",
            name="status_checks",
            field=models.ManyToManyField(
                blank=True,
                help_text=b"Checks used to calculate service status.",
                to="cabotapp.statuscheck",
            ),
        ),
        migrations.AddField(
            model_name="service",
            name="users_to_notify",
            field=models.ManyToManyField(
                blank=True,
                help_text=b"Users who should receive alerts.",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="instance",
            name="status_checks",
            field=models.ManyToManyField(
                blank=True,
                help_text=b"Checks used to calculate service status.",
                to="cabotapp.statuscheck",
            ),
        ),
        migrations.AddField(
            model_name="instance",
            name="users_to_notify",
            field=models.ManyToManyField(
                blank=True,
                help_text=b"Users who should receive alerts.",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="AlertAcknowledgement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("time", models.DateTimeField()),
                ("cancelled_time", models.DateTimeField(blank=True, null=True)),
                (
                    "cancelled_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cancelleduser_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="cabotapp.service"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GraphiteStatusCheck",
            fields=[],
            options={
                "abstract": False,
                "proxy": True,
            },
            bases=("cabotapp.statuscheck",),
        ),
        migrations.CreateModel(
            name="HttpStatusCheck",
            fields=[],
            options={
                "abstract": False,
                "proxy": True,
            },
            bases=("cabotapp.statuscheck",),
        ),
        migrations.CreateModel(
            name="ICMPStatusCheck",
            fields=[],
            options={
                "abstract": False,
                "proxy": True,
            },
            bases=("cabotapp.statuscheck",),
        ),
        migrations.CreateModel(
            name="JenkinsStatusCheck",
            fields=[],
            options={
                "abstract": False,
                "proxy": True,
            },
            bases=("cabotapp.statuscheck",),
        ),
        migrations.CreateModel(
            name="StatusCheckResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("time", models.DateTimeField(db_index=True)),
                ("time_complete", models.DateTimeField(db_index=True, null=True)),
                ("raw_data", models.TextField(null=True)),
                ("succeeded", models.BooleanField(default=False)),
                ("error", models.TextField(null=True)),
                ("job_number", models.PositiveIntegerField(null=True)),
                (
                    "status_check",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="cabotapp.statuscheck"
                    ),
                ),
            ],
            options={
                "ordering": ["-time_complete"],
            },
        ),
        migrations.CreateModel(
            name="AlertPluginUserData",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.CharField(editable=False, max_length=30)),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_cabotapp.alertpluginuserdata_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cabotapp.userprofile",
                    ),
                ),
            ],
            options={
                "unique_together": {("title", "user")},
            },
        ),
        migrations.AddField(
            model_name="Service",
            name="is_public",
            field=models.BooleanField(
                default=False,
                help_text=b"The service will be shown in the public home",
                verbose_name=b"Is Public",
            ),
        ),
        migrations.CreateModel(
            name="JenkinsConfig",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=30)),
                ("jenkins_api", models.CharField(max_length=2000)),
                ("jenkins_user", models.CharField(max_length=2000)),
                ("jenkins_pass", models.CharField(max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name="JenkinsCheck",
            fields=[
                (
                    "statuscheck_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="cabotapp.statuscheck",
                    ),
                ),
                (
                    "jenkins_config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="cabotapp.jenkinsconfig"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("cabotapp.statuscheck",),
        ),
        migrations.DeleteModel(
            name="JenkinsStatusCheck",
        ),
        migrations.RenameModel(
            old_name="JenkinsCheck",
            new_name="JenkinsStatusCheck",
        ),
        migrations.AddField(
            model_name="statuscheckresult",
            name="consecutive_failures",
            field=models.PositiveIntegerField(null=True),
        ),
    ]
